package com.mygaienko.common.algorithms.leetcode.the_maze_iii;

import org.junit.Test;

import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;

public class SolutionTest {

    Solution solution = new Solution();

    @Test
    public void test() {
        var actual = solution.findShortestWay(
                new int[][]{
                        {0, 0, 0, 0, 0},
                        {1, 1, 0, 0, 1},
                        {0, 0, 0, 0, 0},
                        {0, 1, 0, 0, 1},
                        {0, 1, 0, 0, 0}
                },
                new int[]{4, 3},
                new int[]{0, 1});
        assertThat(actual).isEqualTo("lul");
    }

    @Test
    public void test45() {
        var actual = solution.findShortestWay(
                new int[][]{
                        {0, 0, 1, 0, 0}, // 0,4 ball
                        {0, 0, 0, 0, 0},
                        {0, 0, 0, 1, 0},
                        {1, 1, 0, 1, 1},
                        {0, 0, 0, 0, 0}  // 4,4 hole
                },
                new int[]{0, 4},
                new int[]{4, 4});
        assertThat(actual).isEqualTo("ldldrdr");
    }

    @Test
    public void test47() {
        var actual = solution.findShortestWay(
                new int[][]{
                        {0, 0, 0, 0, 0, 0, 0}, // 0,4 ball
                        {0, 0, 1, 0, 0, 1, 0},
                        {0, 0, 0, 0, 1, 0, 0}, // 2,0 hole
                        {0, 0, 0, 0, 0, 0, 1}
                },
                new int[]{0, 4},
                new int[]{2, 0});
        assertThat(actual).isEqualTo("ld");
    }

    /**
     * {0, 1, 0, 1, x, x, x, x, x, x, 1}, // 0,4 ball
     * {0, 1, 0, 1, 1, 1, 0, 1, 1, x, 0}, // 1,6 hole
     * {1, x, x, x, x, x, x, x, x, x, 1}, //2,6 dist = 32
     * {0, x, x, 1, 1, 1, 0, 1, x, x, 1}, //3,6 dist = 31
     * {1, 1, x, x, x, 1, 0, 0, 0, 1, 1}, //4,6 dist = 30
     * {0, 1, x, x, x, x, x, 1, 0, 1, 0}, //5,6 dist = 29
     * {0, 0, x, x, 1, 0, 0, 1, 1, 1, 0}
     */
    @Test
    public void test53() {
        var actual = solution.findShortestWay(
                new int[][]{
                        {0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1}, // 0,4 ball
                        {0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0}, // 1,6 hole
                        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                        {0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1},
                        {1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1},
                        {0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0},
                        {0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0}
                },
                new int[]{0, 4},
                new int[]{1, 6});
        assertThat(actual).isEqualTo("rdluldrdrurdru");
    }

    /**
     * lulululdluldldurld
     * lulululululululululd
     * <p>
     * {0, 1, 0, 1, x, x, x, x, x, x, 1}, // 0,4 ball
     * {0, 1, 0, 1, 1, 1, 0, 1, 1, x, 0}, // 1,6 hole
     * {1, x, x, x, x, x, x, x, x, x, 1}, //2,6 dist = 32
     * {0, x, x, 1, 1, 1, 0, 1, x, x, 1}, //3,6 dist = 31
     * {1, 1, x, x, x, 1, 0, 0, 0, 1, 1}, //4,6 dist = 30
     * {0, 1, x, x, x, x, x, 1, 0, 1, 0}, //5,6 dist = 29
     * {0, 0, x, x, 1, 0, 0, 1, 1, 1, 0}
     */
    @Test
    public void tes60() {
        var actual = solution.findShortestWay(
                new int[][]{
                        {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
                        {0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1},
                        {0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0},
                        {1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                        {0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},
                        {0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1},
                        {0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0},
                        {1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0},
                        {0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0},
                        {0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1},

                        {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0},
                        {1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 00, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0},
                        {0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0},
                        {0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1},
                        {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0},
                        {1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0},
                        {0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0},
                        {0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1},
                        {0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 00},
                        {1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0},

                        {0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0},
                        {0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1},
                        {0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0},
                        {1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0},
                        {0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},
                        {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1},
                        {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0},
                        {0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0},
                        {0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0},
                        {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0}
                },
                new int[]{18, 29},
                new int[]{11, 16});
        assertThat(actual).isEqualTo("lulululululululululd");
        // actual lulululdluldldurld
    }
}